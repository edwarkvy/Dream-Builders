// generated by mBlock5 for mBot Ranger
// codes make you happy

#include <Arduino.h>
#include <Wire.h>
#include <SoftwareSerial.h>
#include <MeAuriga.h>

MeLightSensor lightsensor_12(12);
MeRGBLed rgbled_0(0, 12);
MeBuzzer buzzer;
MeUltrasonicSensor ultrasonic_9(9);
MeEncoderOnBoard Encoder_1(SLOT1);
MeEncoderOnBoard Encoder_2(SLOT2);
MeUltrasonicSensor ultrasonic_10(10);

float Distance = 0;
float Rotation = 0;
float Seconds = 0;
float Degrees = 0;

void isr_process_encoder1(void)
{
  if(digitalRead(Encoder_1.getPortB()) == 0){
    Encoder_1.pulsePosMinus();
  }else{
    Encoder_1.pulsePosPlus();
  }
}
void isr_process_encoder2(void)
{
  if(digitalRead(Encoder_2.getPortB()) == 0){
    Encoder_2.pulsePosMinus();
  }else{
    Encoder_2.pulsePosPlus();
  }
}
void move(int direction, int speed)
{
  int leftSpeed = 0;
  int rightSpeed = 0;
  if(direction == 1){
    leftSpeed = -speed;
    rightSpeed = speed;
  }else if(direction == 2){
    leftSpeed = speed;
    rightSpeed = -speed;
  }else if(direction == 3){
    leftSpeed = -speed;
    rightSpeed = -speed;
  }else if(direction == 4){
    leftSpeed = speed;
    rightSpeed = speed;
  }
  Encoder_1.setTarPWM(leftSpeed);
  Encoder_2.setTarPWM(rightSpeed);
}

void _delay(float seconds) {
  if(seconds < 0.0){
    seconds = 0.0;
  }
  long endTime = millis() + seconds * 1000;
  while(millis() < endTime) _loop();
}

void setup() {
  randomSeed((unsigned long)(lightsensor_12.read() * 123456));
  rgbled_0.setpin(44);
  rgbled_0.fillPixelsBak(0, 2, 1);
  buzzer.setpin(45);
  TCCR1A = _BV(WGM10);
  TCCR1B = _BV(CS11) | _BV(WGM12);
  TCCR2A = _BV(WGM21) | _BV(WGM20);
  TCCR2B = _BV(CS21);
  attachInterrupt(Encoder_1.getIntNum(), isr_process_encoder1, RISING);
  attachInterrupt(Encoder_2.getIntNum(), isr_process_encoder2, RISING);

  rgbled_0.setColor(0,51,0,37);
  rgbled_0.show();
  _delay(1);
  rgbled_0.setColor(0,0,0,0);
  rgbled_0.show();

  buzzer.tone(392, 0.25 * 1000);
  _delay(0.02);

  rgbled_0.setColor(0,39,14,0);
  rgbled_0.show();
  _delay(1);
  rgbled_0.setColor(0,0,0,0);
  rgbled_0.show();

  buzzer.tone(784, 0.25 * 1000);
  _delay(0.02);

  rgbled_0.setColor(0,0,13,51);
  rgbled_0.show();
  _delay(1);
  rgbled_0.setColor(0,0,0,0);
  rgbled_0.show();

  buzzer.tone(1568, 0.25 * 1000);
  _delay(0.02);
  _delay(0.5);
  while(1) {
      if(Distance < random(1, 30 +1)){
        Distance = ultrasonic_9.distanceCm();
        if(Distance < random(1, 30 +1)){
          if(Rotation == 0.200000){

            move(4, 45 / 100.0 * 255);
            _delay(0.5);
            move(4, 0);

          }else{

            move(4, 45 / 100.0 * 255);
            _delay(0.5);
            move(4, 0);

          }

        }else{

          move(1, 45 / 100.0 * 255);

        }

      }else{
        Distance = ultrasonic_10.distanceCm();
        if(Distance < random(1, 30 +1)){
          if(Rotation == 0.200000){

            move(4, 45 / 100.0 * 255);
            _delay(0.5);
            move(4, 0);

          }else{

            move(4, 45 / 100.0 * 255);
            _delay(0.5);
            move(4, 0);

          }

        }else{

          move(1, 45 / 100.0 * 255);

        }

      }
      if(Distance < random(1, 30 +1)){
        Distance = ultrasonic_10.distanceCm();
        if(Distance < random(1, 30 +1)){
          if(Rotation == 0.200000){

            move(4, 45 / 100.0 * 255);
            _delay(0.5);
            move(4, 0);

          }else{

            move(4, 45 / 100.0 * 255);
            _delay(0.5);
            move(4, 0);

          }

        }else{

          move(1, 45 / 100.0 * 255);

        }

      }else{
        Distance = ultrasonic_9.distanceCm();
        if(Distance < random(1, 30 +1)){
          if(Rotation == 0.200000){

            move(4, 45 / 100.0 * 255);
            _delay(0.5);
            move(4, 0);

          }else{

            move(4, 45 / 100.0 * 255);
            _delay(0.5);
            move(4, 0);

          }

        }else{

          move(1, 45 / 100.0 * 255);

        }

      }

      _loop();
  }

}

void _loop() {
  Encoder_1.loop();
  Encoder_2.loop();
}

void loop() {
  _loop();
}
